
Views -> A view is a virtual table, that provides access to a subset of columns or some restricted rows from one or more tables. Views act like a real table but do not take any space. A view is just a stored SQL script.

Materialed Views -> A materialized view has a real table filled by an SQL query like in normal views. The real table is truncated and refilled with a specified time frequency

Indexes -> used for improving speed of data retrieval from tables. 

Functions return values; Procedures return nothing

Triggers -> compiled pgrogram units stored in db and executed with a specific event

Sequences -> db objects which generate unique integers. Usually used for generating primary key values

Data Dictionary Views
===================================================================
select * from dictionary where table_name = 'USER_TABLES';
select * from dictionary where UPPER(comments) like '%SECURITY%';

3 common dictionary views
USER, ALL, DBA

USER Prefixes: Includes all the objects in the user's schema

All Prefixes: All the objects the user can access

DBA Prefixes: Includes all the objects of all users. Only DBA's and users who have the privilege can access

V$ Prefixes: Includes views that have information about performance. Only DBA's and users who have the privilege can access

ALL_OBJECTS

user_tab_columns;
all_tab_columns;
dba_tab_columns;

USER_CONTRAINTS -> 
.CONSTRAINT_TYPE
C -> check constraint
P -> Primary key
U -> Unique key
R -> foreign key
V -> with check option (in views)
O -> with read-only (in views)

DELETE_RULE
CASCADE -> delete children
SET NULL -> set child to null
NO ACTION

USER_CONS_COLUMNS
view all columns <-> constraint pairs

CAT table only has names and types for tables, views and sequences
All_cons_columns view has the table name and column names for the constraints

Indexes
===================================================================
Schema objects for speeding up retrieval of rows by using a pointer
Points to exact location instead of scanning disk

Indexes are created explicitly of autmatically (with creating primary or unique constraint)
Indexes are tied to a table
Indexes are used only when we refer to the index column in a where clause

Types of Indexes
Unique Index: automatically created for a primary key or unique constraint

Nonunique index: created by a user for improving performance with any column or columns

B-tree Indexes: Default index - if most of the values are different using B-tree indexes will be faster

Bitmap Indexes: Used with bitmap keyword. Useful for low cardinality columns ( bitmap indexes will be faster if there are lots of duplicate values)
*Can not be unique

CREATE UNIQUE INDEX temp_idx on employees (employee_id);

*multiple indexes must use all in where clause
CREATE INDEX temp_idx on employees (first_name, last_name);

CREATE BITMAP INDEX temp_idx on employees (first_name, last_name);

CREATE TABLE employee_temp (
employee_id number(6)
PRIMARY KEY USING INDEX (CREATE INDEX temp_idx on employee_templ(employee_id)),
first_name varchar2(20),
last_name varchar2(30)
);

alter table empoyee_temp add primary key (employee_id) using index temp_idex

Function Based Indexes ->
CREATE INDEX first_name_idx on employees (UPPER(first)name));

# only one index can be visible
alter index temp_idx invisible; # must be added in order to add second index

Dropping Indexes ->
If we want to allow DML operations while dropping an index we use ONLINE keyword
DROP INDEX temp_idx ONLINE;

Multiple indexes with same columns ->
We can create multiple indexes on the same set of columns if the indexes are in different types

Anaylyzing Indexes ->
SELECT * FROM user_indexes;
SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = 'USER_INDEXES';
USER_IND_COLUMNS provides information about the columns of our indexes;
SELECT * FROM user_ind_columns where table_name = 'EMPLOYEES' ORDER BY index_name;

Views
===================================================================
Stores select statement

Why use them?
- Restricting data access
- Making complex queries easy
- Present different views of the same data
- Provide data independences

Types of views
- Simple views (one table)
- Complex views (more than one table)

CREATE [OR REPLACE] VIEW view_name as subquery

WITH CHECK OPTIONS checks constraints
WITH READ ONLY
FORCE create even if table does not exist

# using alias
CREATE VIEW tview (alias,alias,alias) as
select col1,col2,col from table

table1 join table2 using (shared_col_name) # alt to on

CREATE OR REPLACE VIEW vname
  SELECT ...

Analysing views ->
select view_name, read_only, text from USER_VIEWS

Performing DML ops with views ->
You can not perform DML operations if the view includes:
group functions, group by clause, distinct, rownum not null, expressions, read only

You can insert using view
INSERT INTO view VALUES (1,2,3,4)

Adding a with check option to the view will restrict what can be inserted

Preventing DML operations on a view
add WITH READ ONLY;

Removing Views ->
DROP VIEW view_name;

Materialized Views
===================================================================
Useful for reducing network loads and improving performance
Holds stored SQL query that keeps running on a certain frequency
Data can become stale

CREATE MATERIALIZED VIEW vname
BUILD [ IMMEDIATE | DEFERRRED ]
REFRESH [ FAST | COMPLETE | FORCE ]
ON [ COMMIT | DEMAND ]
[ [ENABLE | DISABLE ] QUERY REWRITE]
[ ON PREVUILT TABLE ]
AS SELECT ..;

The BUILD clause options are shown below.

IMMEDIATE : The materialized view is populated immediately.
DEFERRED : The materialized view is populated on the first requested refresh.
The following refresh types are available.

FAST : A fast refresh is attempted. If materialized view logs are not present against the source tables in advance, the creation fails.
COMPLETE : The table segment supporting the materialized view is truncated and repopulated completely using the associated query.
FORCE : A fast refresh is attempted. If one is not possible a complete refresh is performed.
A refresh can be triggered in one of two ways.

ON COMMIT : The refresh is triggered by a committed data change in one of the dependent tables.
ON DEMAND : The refresh is initiated by a manual request or a scheduled task.

ON DEMAND -> refresh is performed manually or a scheduled task

ENABLE QUERY REWRITE => allows optimizer to use query rewite option to improve performance for expensive parts of query
DISABLED QUERY REWRITE (default)

CREATE MATERIALIZED VIEW deparment_max_salaries_mv
BUILD IMMEDIATE 
REFRESH COMPLETE ON DEMAND
ENABLE QUERY REWRITE AS 
	SELECT DEPARTMENT_ID,max(salary) FROM employees
	GROUP BY DEPARTMENT_ID
	ORDER BY DEPARTMENT_ID; 

CREATE MATERIALIZED VIEW LOG ON employees;
DROP MATERIALIZED VIEW LOG ON employees; 

Log captures all changes and fast refresh applies the changes rather than a full refresh

Complex materialzed views can not be fast refereshed
complex = connect by, distinct, set operators (intersect, minus) (union does not always mean complex)
joins with other tables
aggregate functions

Refreshing ->
FAST REFRESH uses view log to update based on changes (not a full refresh)
COMPLETE REFRESH clears the entire table and refills it
FORCE REFRESH (default) perform fast if possible otherwise perform complete

Manual refresh ->
EXECUTE DBMS_MVIEW.REFRESH('vw_it_programmers', 'F');

could also use DBMS_SNAPSHOT
DBMS_SNAPSHOT.REFRESH_ALL_MVIEWS(tname, 'C', '', TRUE, FALSE, FALSE);

Periodic scheduling ->
START WITH sysdate + 3/24 // 3 hours from now
NEXT sysdate + 5 // 5 days


Sequences
===================================================================

CREATE SEQUENCE employee_seq
start with 100
increment by 3

maxvalue 9999
cache 50
nocycle
order;

nocycle -> stop generating numbers after reaching the max value 
(need this for primary key or else it will reset to min value)
noorder -> don't want to guarentee numbers will be in order

ALTER SEQUENCE sequence_name;
can't use start with

DROP SEQUENCE sequence_name;

Using Sequences:
NEXTVAL
CURRVAL -> last generated sequence (may need to run nextval first if session expired)

select employee_seq.currval from DUAL;
select employee_seq.nextval from DUAL;
CURRVAL

INSERT INTO EMPLOYEES (EMPLOYEE_ID...)
VALUES (EMPLOYEE_SEQ.NEXTVAL...)

Using Sequences as a default value ->
create table temp (t1 number default employee_seq.next_val, t2 varchar2(50));
insert into temp(t2) values ('Alex');

DESCRIBE USER_SEQUENCES;

sequences can not be used in group by clause

Synonyms
===================================================================
CREATE SYNONYM sy FOR sys.user.objects
DROP [PUBLIC] SYNONYM sy; (only done by DBA)

USER_SYNONYMS data dictionary
select * from dba_synonyms where owner = 'HR';

If the synonym is not created as public, other users can not query it.

Subqueries
===================================================================
can be used like an INLINE View

Select a.first_name,a.last_name,a.hire_date,a.job_id,b.department_name,b.city from empvw80 a join 
(select state_province,city,department_id,department_name from departments join locations using (location_id)) b
using (department_id);

Scalar subquery returns exactly one column for one row ( useful for where columns, where id = one_value)

Multiple-column subqueries ->
SELECT first_name, last_name,manager_id,department_id from employees 
where 
department_id in (select department_id from employees where UPPER(first_name) = 'LUIS')
and manager_id in (select manager_id from employees where UPPER(first_name) = 'LUIS')

Correlated Subquery ->
SELECT employee_id, first_name,last_name,department_id, salary FROM employees a 
      where salary = (SELECT max(salary) from employees b where b.department_id = a.department_id );

Not exist operations
We can use not in operator instead of not exist but we may not get exact result every time
(if any row with null value returns in the subquery there will be an error)

With Clause ->
WITH MAX_SALARIES AS 
(
  SELECT MAX(SALARY) maximum_salary, trunc(AVG(salary)) average_salary, department_id 
    from EMPLOYEES GROUP BY DEPARTMENT_ID) 
SELECT employee_id, maximum_salary, average_salary, department_id FROM employees e 
NATURAL JOIN MAX_SALARIES;

Recursive with clause ->
find all managers of all employees

WITH ALL_MANAGERS(Employee,Manager,Department) AS 
(
SELECT employee_id, manager_id, department_id from employees // anchor
UNION ALL
SELECT all_managers.employee, employees.manager_id,all_managers.department FROM all_managers, employees  // recursive
WHERE all_managers.manager = employees.employee_id
)

Anchor member and a recursive member can be combined with just UNION ALL operator

WITH CHECK OPTION keyword prevents inserting or updating a row that is not suitable with the subquery
restricts inserting data that does not satisfy where clause

Correlated update ->
create table employees_temp as select * from employees;
select * from employees_temp;

update employees_temp t set
   (t.salary,t.commission_pct) = (
   select avg(salary),avg(e.commission_pct) from employees e join departments d on (e.department_id = d.department_id)
   where t.department_id = d.department_id
   group by d.department_id
   );

Correlated delete ->
delete from employees_temp
where department_id in
  (select department_id from departments d natural join locations l
  where country_id = 'UK')

**We can not use joins while inserting

Advanced Data Manipulations
===================================================================

--Manipulating data
create table departments_temp as select * from departments;
select * from departments_temp;
alter table departments_temp modify (manager_id number(6) default 100);

insert into departments_temp (department_id,department_name,manager_id,location_id)
values (310,'Temp Department',default,2000);
update departments_temp set manager_id = default;

Unconditional and Conditional insert statements ->
insert all
  into employees_history values (employee_id,first_name,last_name,hire_date)
  into salary_history values (employee_id,extract (year from sysdate),extract (month from sysdate),salary,commission_pct)
  select * from employees where hire_date > sysdate-365;

INSERT ALL
  WHEN hire_date > sysdate-365 THEN
    INTO employees_history values (employee_id,first_name,last_name,hire_date)
    INTO salary_history values (employee_id,extract (year from sysdate),extract (month from sysdate),salary,commission_pct)
  WHEN job_id = 'IT_PROG' THEN
    INTO IT_PROGRAMMERS values (employee_id,first_name,last_name,hire_date)
  WHEN department_id in 
  (select department_id from departments where location_id in (select location_id from locations where country_id = 'US')) THEN
    INTO LIVING_IN_US values (employee_id,first_name,last_name,hire_date)
  SELECT * FROM EMPLOYEES;

FlaskBack & Purge ->
We can restore a table back to a specific time or before a drop with FLASHBACK statement

select * from recyclebin;
ALTER TABLE EMPLOYEES_COPY ENABLE ROW MOVEMENT; 
delete from employees_copy where salary > 5000;
commit;
select * from employees_copy;
flashback table employees_copy to timestamp sysdate-1/1440;
select dbms_flashback.get_system_change_number scn from dual;
FLASHBACK TABLE EMPLOYEES_COPY TO SCN 202381;
DROP TABLE EMPLOYEES_COPY PURGE;

Version Queuries ->

SELECT DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER FROM DUAL;
--6 VERSIONS
SELECT * FROM V$TRANSACTION;
System Change Number (SCN)

SELECT * FROM employees_copy
AS OF sysdate - 5
WHERE employee_id= 100;

SELECT * FROM employees_copy
AS OF SCN 6167700
WHERE employee_id= 100;

SELECT versions_starttime,versions_starttime, salary FROM employees_copy
VERSIONS  BETWEEN TIMESTAMP(sysdate - interval '13' minute)  AND sysdate
WHERE employee_id= 100;

most important benefit of multitable insert statements?
If you do not use multitable insert, you will need to retrieve the same data for all the inserts. 
If you use, you get the data once, and insert many. So, this will reduce database work, and increase performance.

In this query, we are selecting all the changes starting the beginning, till now.
SELECT * FROM employees_copy VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE;

Controlling Schema Objects
===================================================================
ALTER TABLE employees_tmp drop primary key cascade ->
Using cascade option will also drop all the associted foreign keys

What does online mean?
ALTER TABLE employees_temp DROP CONSTRAINT emp_pk ONLINE; 
If you do not use this keyword, the table will be locked until the drop operation finishes.

What is the usage of ON DELETE CASCADE keyword?
ON DELETE SET NULL will also set NULL to all child rows to NULL when the parent row is deleted

Normally, when you drop a column, NOT NULL, PRIMARY KEY and UNIQUE constraints are dropped.
But when you drop a column that is usded within a FOREIGN KEY, or used with a multi-column constraints, you can not drop this column directly.
ALTER TABLE departments_temp DROP COLUMN department_id CASCADE CONSTRAINTS;

this option will not check the existing rows, but will check the new ones (after creation)
ENABLE NOVALIDATE: No row is checked before-after enabling the constraint

If you commit with a violation, all the DML operations will be rollbacked

SET CONTRAINTS ALL DEFERRED;
Sets all the deferrable constraints deferred;

By default, it is ON COMMIT DELETE ROWS , means transaction specific. That means, the data will be truncated after the commit.

alter table employees_temp add constraint
temp_cons unique (employee_id);
alter table employees_temp add constraint
temp_cons2 unique (employee_id,first_name);
alter table employees_temp add unique (phone_number);

alter table employees_temp modify job_id constraint
not_null_job not null;
alter table employees_temp modify first_name not null;

alter table employees_temp drop constraint temp_cons; 
alter table employees_temp drop constraint SYS_C0010501;

--cascading constraints
select * from all_constraints where table_name = 'EMPLOYEES_TEMP';
alter table departments_temp add constraint pk_dep_temp 
primary key (department_id );
ALTER TABLE employees_temp ADD CONSTRAINT emp_dp_man_fk
FOREIGN KEY (department_id)
REFERENCES departments_temp(department_id);

--enabling and disabling constraints
ALTER TABLE EMPLOYEES_TEMP DISABLE CONSTRAINT SYS_C0010502;

--Deferring constraints
create table dep_temp as select * from departments;
ALTER TABLE DEP_TEMP
ADD CONSTRAINT dep_id_pk
PRIMARY KEY (department_id)
DEFERRABLE INITIALLY DEFERRED;
select * from dep_temp;
insert into DEP_TEMP VALUES (10,'Temp Department',200,1700);
commit;
SET CONSTRAINTS dep_id_pk IMMEDIATE;
ALTER SESSION SET CONSTRAINTS = IMMEDIATE;
insert into DEP_TEMP VALUES (10,'Temp Department',200,1700);

ALTER TABLE DEP_TEMP DROP CONSTRAINT dep_id_pk;

ALTER TABLE DEP_TEMP
ADD CONSTRAINT dep_id_pk
PRIMARY KEY (department_id)
NOT DEFERRABLE;

SET CONSTRAINTS dep_id_pk IMMEDIATE;
SET CONSTRAINTS dep_id_pk DEFERRED;

Permissions and Roles
===================================================================
If you did not grant any privilege to a user, he/she even can not connect to the database.

Every schema is owned by one user, and its user is created on the time of schema creation. So you can not create another user under your schema

You can find all the system privileges under system_privilege_map

A user who has the privilege is called Grantee
A user who granted a privilege to a user is called a Grantor

You can find all your priviledes under session_privs

select * from system_privilege_map;
select * from user_sys_privs;
select * from session_privs;

create user temp_user identified by 123;
GRANT CREATE SESSION, CREATE TABLE, CREATE VIEW TO TEMP_USER;
DROP USER TEMP_USER;

CREATE ROLE DEVELOPER;
GRANT CREATE TABLE, CREATE VIEW TO DEVELOPER;
GRANT DEVELOPER TO TEMP_USER;

---CHANGE PASSWORD
password;
ALTER USER HR IDENTIFIED BY HR;

Hierarchical Retrieval (Tree Structure)
===================================================================
For reporting hierarchy frequently in a specific order

Hierarchical Queries are generated with using CONNECT BY and START WITH clauses

where clause will not impact child rows

Walking the tree 
START WITH employee_id = '103';
PRIOR refers to child rows

SELECT employee_id, first_name,last_name, job_id, manager_id
FROM employees
START WITH employee_id = 102
CONNECT BY PRIOR employee_id = manager_id ;

Not including START WITH will return duplicate rows if row is in multiple trees

The column name following the PRIOR keyword is the child record

select level,...
WHERE LEVEL = 2 (does not return root level)

SELECT LPAD(last_name, LENGTH(last_name)+(LEVEL*2)-2,'> ')
  AS employees_hierarchy
  FROM employees
START WITH employee_id =101
CONNECT BY PRIOR employee_id=manager_id;

--Pruning Branches of a Tree
Using WHERE clause -> elimates records statisfying where clause
Using CONNECT BY -> elimates records statisfying where clause and all the childs of these records

SELECT employee_id,last_name,manager_id
  FROM employees where employee_id <> 108
START WITH employee_id =101
CONNECT BY PRIOR employee_id=manager_id;

